// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomServiceClient interface {
	Create(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	Find(ctx context.Context, in *FindRoomRequest, opts ...grpc.CallOption) (*Room, error)
	FindRoomMembers(ctx context.Context, in *FindRoomRequest, opts ...grpc.CallOption) (*FindRoomMembersResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*Room, error)
	FindJoinedRooms(ctx context.Context, in *FindJoinedRoomsRequest, opts ...grpc.CallOption) (*FindJoinedRoomsResponse, error)
	FindOwnedRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindOwnedRoomsResponse, error)
	FindAllRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindAllRoomsResponse, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) Create(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/RoomService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) Find(ctx context.Context, in *FindRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/RoomService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) FindRoomMembers(ctx context.Context, in *FindRoomRequest, opts ...grpc.CallOption) (*FindRoomMembersResponse, error) {
	out := new(FindRoomMembersResponse)
	err := c.cc.Invoke(ctx, "/RoomService/FindRoomMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/RoomService/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) FindJoinedRooms(ctx context.Context, in *FindJoinedRoomsRequest, opts ...grpc.CallOption) (*FindJoinedRoomsResponse, error) {
	out := new(FindJoinedRoomsResponse)
	err := c.cc.Invoke(ctx, "/RoomService/FindJoinedRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) FindOwnedRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindOwnedRoomsResponse, error) {
	out := new(FindOwnedRoomsResponse)
	err := c.cc.Invoke(ctx, "/RoomService/FindOwnedRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) FindAllRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindAllRoomsResponse, error) {
	out := new(FindAllRoomsResponse)
	err := c.cc.Invoke(ctx, "/RoomService/FindAllRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility
type RoomServiceServer interface {
	Create(context.Context, *CreateRoomRequest) (*Room, error)
	Find(context.Context, *FindRoomRequest) (*Room, error)
	FindRoomMembers(context.Context, *FindRoomRequest) (*FindRoomMembersResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*Room, error)
	FindJoinedRooms(context.Context, *FindJoinedRoomsRequest) (*FindJoinedRoomsResponse, error)
	FindOwnedRooms(context.Context, *emptypb.Empty) (*FindOwnedRoomsResponse, error)
	FindAllRooms(context.Context, *emptypb.Empty) (*FindAllRoomsResponse, error)
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (UnimplementedRoomServiceServer) Create(context.Context, *CreateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoomServiceServer) Find(context.Context, *FindRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedRoomServiceServer) FindRoomMembers(context.Context, *FindRoomRequest) (*FindRoomMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoomMembers not implemented")
}
func (UnimplementedRoomServiceServer) JoinRoom(context.Context, *JoinRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedRoomServiceServer) FindJoinedRooms(context.Context, *FindJoinedRoomsRequest) (*FindJoinedRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindJoinedRooms not implemented")
}
func (UnimplementedRoomServiceServer) FindOwnedRooms(context.Context, *emptypb.Empty) (*FindOwnedRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOwnedRooms not implemented")
}
func (UnimplementedRoomServiceServer) FindAllRooms(context.Context, *emptypb.Empty) (*FindAllRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRooms not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	s.RegisterService(&RoomService_ServiceDesc, srv)
}

func _RoomService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Create(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Find(ctx, req.(*FindRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_FindRoomMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).FindRoomMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomService/FindRoomMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).FindRoomMembers(ctx, req.(*FindRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomService/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_FindJoinedRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindJoinedRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).FindJoinedRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomService/FindJoinedRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).FindJoinedRooms(ctx, req.(*FindJoinedRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_FindOwnedRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).FindOwnedRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomService/FindOwnedRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).FindOwnedRooms(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_FindAllRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).FindAllRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomService/FindAllRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).FindAllRooms(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomService_ServiceDesc is the grpc.ServiceDesc for RoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoomService_Create_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _RoomService_Find_Handler,
		},
		{
			MethodName: "FindRoomMembers",
			Handler:    _RoomService_FindRoomMembers_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _RoomService_JoinRoom_Handler,
		},
		{
			MethodName: "FindJoinedRooms",
			Handler:    _RoomService_FindJoinedRooms_Handler,
		},
		{
			MethodName: "FindOwnedRooms",
			Handler:    _RoomService_FindOwnedRooms_Handler,
		},
		{
			MethodName: "FindAllRooms",
			Handler:    _RoomService_FindAllRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/room.proto",
}
